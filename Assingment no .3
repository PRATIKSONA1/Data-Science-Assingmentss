{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Assingment no.3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 1. Why are functions advantageous to have in your programs?\n",
    "Ans=\n",
    "Functions are advantageous to have in programs for several reasons:\n",
    "\n",
    "Reusability: Functions allow you to write code once and reuse it in different parts\n",
    "    of your program or even in different programs. This can save you time and effort, \n",
    "    and also make your code more modular and easier to maintain.\n",
    "\n",
    "Code organization: Functions help you organize your code into logical, reusable chunks.\n",
    "    By breaking down your code into smaller, more manageable functions, you can make your\n",
    "    code more readable, easier to understand, and easier to modify.\n",
    "\n",
    "Abstraction: Functions allow you to abstract away complex details and focus on high-level\n",
    "    concepts. By defining functions that perform specific tasks, you can hide the implementation\n",
    "    details from the rest of your code and make it easier to reason about the behavior of your program.\n",
    "\n",
    "Testing: Functions make it easier to test your code. By defining functions that perform specific tasks,\n",
    "    you can write tests that check the behavior of those functions in isolation, without having to test the \n",
    "    entire program at once."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#2. When does the code in a function run: when its specified or when its called?\n",
    "Ans=\n",
    "The code in a function runs only when the function is called, not when it is defined or specified.\n",
    "\n",
    "When you define a function, you are essentially creating a reusable block of code that can be \n",
    "executed later when the function is called. The code inside the function is not executed until \n",
    "the function is called with its name and any required parameters.\n",
    "\n",
    "Once the function is called, the code inside the function is executed, and the results are \n",
    "returned back to the caller. After the function has completed its execution, the program \n",
    "continues to execute from where it left off before the function call.\n",
    "\n",
    "Therefore, the execution of code inside a function is completely controlled by its calling statement.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#3. What statement creates a function?\n",
    "Ans=\n",
    "The def statement is used to create a function in Python.\n",
    "\n",
    "The syntax of the def statement is as follows:\n",
    "\n",
    "python\n",
    "Copy code\n",
    "def function_name(parameters):\n",
    "    \"\"\"docstring\"\"\"\n",
    "    \n",
    "    return expression\n",
    "\n",
    "\n",
    "Here, function_name is the name of the function that you want to create. \n",
    "It can be any valid identifier. The parameters are optional, and they are the \n",
    "input arguments passed to the function. The code block consists of the statements \n",
    "that are executed when the function is called. The return statement is optional, \n",
    "and it returns the value of the expression to the caller."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#4. What is the difference between a function and a function call?\n",
    "Ans=\n",
    "A function is a block of code that performs a specific task and can be called from \n",
    "anywhere in the program. It is defined using the def keyword, followed by the function name, \n",
    "parameters (if any), and the body of the function.\n",
    "\n",
    "On the other hand, a function call is the code used to invoke or execute the function. \n",
    "It consists of the function name followed by the arguments (if any) enclosed in parentheses.\n",
    "When a function is called, the code inside the function is executed, and any results are returned (if specified).\n",
    "\n",
    "In simpler terms, a function is like a recipe, and a function call is like using that \n",
    "recipe to cook a meal. The recipe is defined once, but it can be used many times to make\n",
    "different meals. Similarly, a function is defined once, but it can be called many times \n",
    "with different arguments to perform different tasks."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#5. How many global scopes are there in a Python program? How many local scopes?\n",
    "Ans=\n",
    "In Python, there is one global scope that is created when the program starts running. \n",
    "This global scope remains active until the program exits. Whenever a function is called,\n",
    "a new local scope is created for that function. The local scope is destroyed when the function returns. \n",
    "Therefore, the number of local scopes can vary depending on how many functions are called \n",
    "during the execution of the program."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#6. What happens to variables in a local scope when the function call returns?\n",
    "Ans=\n",
    "\n",
    "When a function call returns, the local scope created for that function is destroyed. \n",
    "Any variables defined within the local scope, including parameters passed into the function, \n",
    "are destroyed along with it. The values of these variables cannot be accessed outside the local \n",
    "scope of the function."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#7. What is the concept of a return value? Is it possible to have a return value in an expression?\n",
    "Ans=\n",
    "In Python, a return value is the value that a function call evaluates to when it completes.\n",
    "The concept of a return value allows a function to send data back to the calling code, which\n",
    "can then be stored in a variable or used in an expression.\n",
    "\n",
    "\n",
    "Example :-\n",
    "def add_numbers(x, y):\n",
    "    return x + y\n",
    "\n",
    "result = add_numbers(2, 3) * 2\n",
    "print(result)\n",
    "In this example, the add_numbers() function returns the sum of two numbers. The return value of the function ."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 8. If a function does not have a return statement, what is the return value of a call to that function?\n",
    "Ans=\n",
    "If a function does not have a return statement, the return value of a call to that function is None. None is a special constant in\n",
    "Python that represents the absence of a value.\n",
    "It is often used to indicate that a function has completed its task successfully without producing any meaningful value to return."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 9. How do you make a function variable refer to the global variable?\n",
    "Ans=\n",
    "9. How do you make a function variable refer to the global variable?\n",
    "ChatGPT\n",
    "To make a function variable refer to the global variable, you can use the global keyword \n",
    "followed by the variable name inside the function. This tells Python to use the global \n",
    "variable instead of creating a new local variable with the same name.\n",
    "\n",
    "Here's an example:\n",
    "\n",
    "csharp\n",
    "Copy code\n",
    "x = 10\n",
    "\n",
    "def my_function():\n",
    "    global x\n",
    "    x = 5\n",
    "\n",
    "my_function()\n",
    "print(x) # Output: 5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 10. What is the data type of None?\n",
    "Ans=\n",
    "The data type of None is NoneType. It is a special built-in value in Python that represents the absence of a\n",
    "value or a null value."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 11. What does the sentence import areallyourpetsnamederic do?\n",
    "Ans=\n",
    "\n",
    "The sentence \"import areallyourpetsnamederic\" would try to import a module named \"areallyourpetsnamederic\"\n",
    "in the current Python program. If the module exists, it will be loaded into the program and any functions \n",
    "or variables defined in the module can be used in the program. If the module does not exist, an ImportError \n",
    "will be raised."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 12. If you had a bacon() feature in a spam module, what would you call it after importing spam?\n",
    "Ans=\n",
    "\n",
    "If there is a function called bacon() in a module named spam, you can call it after importing the \n",
    "module spam using the following syntax:\n",
    "\n",
    "arduino\n",
    "\n",
    "import spam\n",
    "spam.bacon()\n",
    "This will call the bacon() function that is defined inside the spam module."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 13. What can you do to save a programme from crashing if it encounters an error?\n",
    "Ans=\n",
    "To save a program from crashing if it encounters an error, you can use exception handling in Python.\n",
    "This involves using a try-except block around the code that could potentially raise an error, and specifying\n",
    "what should happen if the error occurs.\n",
    "\n",
    "Here is an example of a try-except block in Python:\n",
    "\n",
    "makefile\n",
    "Copy code\n",
    "try:\n",
    "    # code that could potentially raise an error\n",
    "except:\n",
    "    # code to handle the error\n",
    "If an error occurs in the code within the try block, the program will immediately jump to \n",
    "the except block and execute the code within it. You can use different types of exceptions to handle \n",
    "specific types of errors.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 14. What is the purpose of the try clause? What is the purpose of the except clause?\n",
    "Ans=\n",
    "\n",
    "The try and except clauses in Python are used for exception handling. \n",
    "The try clause contains the code that is being executed and monitored for exceptions. \n",
    "If an exception occurs during the execution of the try clause, the program execution is \n",
    "immediately transferred to the except block. The except clause is where the handling of \n",
    "the exception occurs. It contains the code that is executed in response to the exception.\n",
    "\n",
    "In summary, the purpose of the try clause is to execute code that may raise an exception, \n",
    "and the purpose of the except clause is to handle that exception in a way that allows the \n",
    "program to continue running without crashing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
